openapi: 3.0.0
info:
  version: 1.0.0
  title: User Settings
  description: ''
servers:
  - url: 'https://api.demo.tokend.io'
    description: TokenD Developer Environment
paths:
  /integrations/my-user-settings-service/profile:
    post:
      tags:
        - User-Settings
      summary: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: User created successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
    get:
      tags:
        - User-Settings
      summary: Get user list
      operationId: getUserList
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageLimitParam'
        - in: query
          name: 'page[limit]'
          required: false
          schema:
            type: string
        - in: query
          name: 'page[offset]'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserList'
                  links:
                    $ref: '#/components/schemas/DataLinks'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  '/integrations/my-user-settings-service/profile/{id}':
    put:
      tags:
        - User-Settings
      summary: Update user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User update successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
    delete:
      tags:
        - User-Settings
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User delete successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
components:
  schemas:
    CreateUser:
      allOf:
        - $ref: '#/components/schemas/UserKey'
        - type: object
          properties:
            attributes:
              type: object
              required:
                - first_name
                - second_name
                - login
                - password
                - mail
              properties:
                first_name:
                  type: string
                second_name:
                  type: string
                login:
                  type: string
                password:
                  type: string
                mail:
                  type: string
    DataLinks:
      type: object
      description: Provides links for pagination
      properties:
        self:
          type: string
          description: link to the current page
        next:
          type: string
          description: link to the next page
        last:
          type: string
          description: link to the last page
    RequestError:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/RequestErrorResource'
    RequestErrorResource:
      type: object
      properties:
        status:
          type: string
          enum:
            - 400
            - 500
        title:
          type: string
        detail:
          type: string
      required:
        - status
        - title
        - detail
    UpdateUser:
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        second_name:
          type: string
        login:
          type: string
        password:
          type: string
        email:
          type: string
    UserKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - users
    UserList:
      allOf:
        - $ref: '#/components/schemas/UserKey'
        - type: object
          properties:
            attributes:
              type: object
              required:
                - first_name
                - second_name
                - login
                - password
                - mail
              properties:
                first_name:
                  type: string
                second_name:
                  type: string
                login:
                  type: string
                password:
                  type: string
                mail:
                  type: string
  parameters:
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        minimum: 1
        default: 10
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[offset]'
      required: false
      schema:
        type: integer
        default: 1
      description: The number of a page to return.
